{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Haveno Documentation Welcome to the documentation of Haveno, the Decentralized, peer-to-peer network based on Monero. Take a look at the menu on the left and start exploring. Make sure you also take a look at the FAQ on the website. Haveno Website Github Project Matrix Space","title":"Home"},{"location":"#haveno-documentation","text":"Welcome to the documentation of Haveno, the Decentralized, peer-to-peer network based on Monero. Take a look at the menu on the left and start exploring. Make sure you also take a look at the FAQ on the website. Haveno Website Github Project Matrix Space","title":"Haveno Documentation"},{"location":"development/bounties/","text":"Bounties We use bounties to incentivize development and reward contributors. All issues available for a bounty are listed on the Kanban board . It's possible to list on each repository the issues with a bounty on them, by searching issues with the '\ud83d\udcb0bounty' label. Bounties Board To receive a bounty, you agree to these conditions: Your changes must follow the styling guidelines . Bounties will be set and awarded in XMR at the discretion of the Haveno core team. The issues eligible for a bounty are labelled '\ud83d\udcb0bounty' and have the amount of the bounty specified in the title in this form: [$200] if in dollars or [1 XMR] if in Monero. An issue is considered resolved when the patch(es) proposed by the contributor is/are merged in the appropriate repository according to the terms of the issue. The first person who resolves an issue in its entirety will receive the entire amount of the bounty. If the issue is resolved collaboratively by more than one person, the reward will be distributed among the contributors at the discretion of the Haveno core team. Let the Maintainers know if you intend to work on a bounty so that the issue can be assigned to you. Being assigned to an issue doesn't make that issue resolvable only by the assignee. It's meant to avoid duplication of efforts and not to discourage collective work. After the issue is resolved, contact the maintainers and claim your bounty (remember to provide them with a Monero address). If a big number of bounties is claimed at the same time, the maintainers might opt for sending all the rewards on a specific day of the month instead of right after resolution. If the bounty is in dollars, the contributor will receive the amount in Monero according to the value of XMR at the moment the issue was practically resolved, so at the moment the maintainers accept the last patch resolving the issue. We want to keep the system simple and flexible, but we will add new rules or edit existing ones if necessary.","title":"Bounties"},{"location":"development/bounties/#bounties","text":"We use bounties to incentivize development and reward contributors. All issues available for a bounty are listed on the Kanban board . It's possible to list on each repository the issues with a bounty on them, by searching issues with the '\ud83d\udcb0bounty' label. Bounties Board To receive a bounty, you agree to these conditions: Your changes must follow the styling guidelines . Bounties will be set and awarded in XMR at the discretion of the Haveno core team. The issues eligible for a bounty are labelled '\ud83d\udcb0bounty' and have the amount of the bounty specified in the title in this form: [$200] if in dollars or [1 XMR] if in Monero. An issue is considered resolved when the patch(es) proposed by the contributor is/are merged in the appropriate repository according to the terms of the issue. The first person who resolves an issue in its entirety will receive the entire amount of the bounty. If the issue is resolved collaboratively by more than one person, the reward will be distributed among the contributors at the discretion of the Haveno core team. Let the Maintainers know if you intend to work on a bounty so that the issue can be assigned to you. Being assigned to an issue doesn't make that issue resolvable only by the assignee. It's meant to avoid duplication of efforts and not to discourage collective work. After the issue is resolved, contact the maintainers and claim your bounty (remember to provide them with a Monero address). If a big number of bounties is claimed at the same time, the maintainers might opt for sending all the rewards on a specific day of the month instead of right after resolution. If the bounty is in dollars, the contributor will receive the amount in Monero according to the value of XMR at the moment the issue was practically resolved, so at the moment the maintainers accept the last patch resolving the issue. We want to keep the system simple and flexible, but we will add new rules or edit existing ones if necessary.","title":"Bounties"},{"location":"development/contributor-guidelines/","text":"Contributing to Haveno Thanks for wishing to help! Here there are some guidelines and information about the development process. We suggest you join the matrix room #haveno-dev (relayed on IRC/Libera ) and have a chat with the devs, so that we can help get you started. Issues are tracked on GitHub. We use a label system and GitHub's project boards to simplify development. Make sure to take a look at those and follow the priorities suggested. General guidelines Be verbose. Remember this is collaborative development and we need to make life as easy as possible for future developers and the current maintainers. All formatting needs to be consistent with the current code. Changes must be done 'the right way'. No hacks to make things work, if you are having issues, let the other devs know so that we can help you out. Rebase and squash your commits Development process When you have something new built for Haveno, submit a pull request for review to be merged. Pull requests should contain as many details as possible about what you are going to change and why. Avoid \"title only\" PRs, unless they are self-explanatory. Pull requests should contain one single commit, unless it makes sense to have more. Please become familiar with git if you are not. Pull requests won't be merged before 24 hours have passed. This timeframe will be extended when Haveno will have more active developers.","title":"Contributor Guidelines"},{"location":"development/contributor-guidelines/#contributing-to-haveno","text":"Thanks for wishing to help! Here there are some guidelines and information about the development process. We suggest you join the matrix room #haveno-dev (relayed on IRC/Libera ) and have a chat with the devs, so that we can help get you started. Issues are tracked on GitHub. We use a label system and GitHub's project boards to simplify development. Make sure to take a look at those and follow the priorities suggested.","title":"Contributing to Haveno"},{"location":"development/contributor-guidelines/#general-guidelines","text":"Be verbose. Remember this is collaborative development and we need to make life as easy as possible for future developers and the current maintainers. All formatting needs to be consistent with the current code. Changes must be done 'the right way'. No hacks to make things work, if you are having issues, let the other devs know so that we can help you out. Rebase and squash your commits","title":"General guidelines"},{"location":"development/contributor-guidelines/#development-process","text":"When you have something new built for Haveno, submit a pull request for review to be merged. Pull requests should contain as many details as possible about what you are going to change and why. Avoid \"title only\" PRs, unless they are self-explanatory. Pull requests should contain one single commit, unless it makes sense to have more. Please become familiar with git if you are not. Pull requests won't be merged before 24 hours have passed. This timeframe will be extended when Haveno will have more active developers.","title":"Development process"},{"location":"development/haveno-ts/","text":"haveno-ts Library haveno-ts is a library users and programs can use to interact with Haveno without necessarily needing a user interface. It's a set of API calls that can be integrated on any platform, wallet or application: haveno-ts The new user interface will use haveno-ts to communicate with the Haveno core. If you are interested in integrating Haveno into your app, let us know and we'll be happy to help you out. Documented API calls Documentation is automatically generate using Typedoc: API Docs Run API tests Running the API tests is the best way to develop and test Haveno end-to-end. HavenoClient.ts provides the client interface to Haveno's backend daemon. Run a local Haveno test network and then shut down the arbitrator, Alice, and Bob or run them as daemons, e.g. make alice-daemon . You may omit the arbitrator registration steps since it is done automatically in the tests. Clone this project to the same parent directory as the haveno project: git clone https://github.com/haveno-dex/haveno-ts In a new terminal, start envoy with the config in haveno-ts/config/envoy.test.yaml (change absolute path for your system): docker run --rm --add-host host.docker.internal:host-gateway -it -v ~/git/haveno-ts/config/envoy.test.yaml:/envoy.test.yaml -p 8079:8079 -p 8080:8080 -p 8081:8081 -p 8082:8082 -p 8083:8083 -p 8084:8084 -p 8085:8085 -p 8086:8086 envoyproxy/envoy-dev:8a2143613d43d17d1eb35a24b4a4a4c432215606 -c /envoy.test.yaml In a new terminal, start the funding wallet. This wallet will be automatically funded in order to fund Alice and Bob during the tests. For example: cd ~/git/haveno && make funding-wallet . Install protobuf compiler v3.19.1 or later for your system: mac: brew install protobuf linux: apt install protobuf-compiler NOTE: You may need to upgrade to v3.19.1 manually if your package manager installs an older version. Download protoc-gen-grpc-web plugin and make executable as shown here . cd haveno-ts npm install npm test to run all tests or npm run test -- -t 'my test' to run tests by name. Adding new API functions and tests Follow instructions to run Haveno's existing API tests successfully. Define the new service or message in Haveno's protobuf definition . Clean and build Haveno after modifying the protobuf definition: make clean && make Implement the new service in Haveno's backend, following existing patterns. For example, the gRPC function to get offers is implemented by GrpcServer > GrpcOffersService.getOffers(...) > CoreApi.getOffers(...) > CoreOffersService.getOffers(...) > OfferBookService.getOffers() . Build Haveno: make Update the gRPC client in haveno-ts: npm install Add the corresponding typescript method(s) to haveno.ts with clear and concise documentation. Add clean and comprehensive tests to haveno.test.ts , following existing patterns. Run the tests with npm run test -- -t 'my test' to run tests by name and npm test to run all tests together. Ensure all tests pass and there are no exception stacktraces in the terminals of Alice, Bob, or the arbitrator. Open pull requests to the haveno and haveno-ts projects for the backend and frontend implementations.","title":"haveno-ts"},{"location":"development/haveno-ts/#haveno-ts-library","text":"haveno-ts is a library users and programs can use to interact with Haveno without necessarily needing a user interface. It's a set of API calls that can be integrated on any platform, wallet or application: haveno-ts The new user interface will use haveno-ts to communicate with the Haveno core. If you are interested in integrating Haveno into your app, let us know and we'll be happy to help you out.","title":"haveno-ts Library"},{"location":"development/haveno-ts/#documented-api-calls","text":"Documentation is automatically generate using Typedoc: API Docs","title":"Documented API calls"},{"location":"development/haveno-ts/#run-api-tests","text":"Running the API tests is the best way to develop and test Haveno end-to-end. HavenoClient.ts provides the client interface to Haveno's backend daemon. Run a local Haveno test network and then shut down the arbitrator, Alice, and Bob or run them as daemons, e.g. make alice-daemon . You may omit the arbitrator registration steps since it is done automatically in the tests. Clone this project to the same parent directory as the haveno project: git clone https://github.com/haveno-dex/haveno-ts In a new terminal, start envoy with the config in haveno-ts/config/envoy.test.yaml (change absolute path for your system): docker run --rm --add-host host.docker.internal:host-gateway -it -v ~/git/haveno-ts/config/envoy.test.yaml:/envoy.test.yaml -p 8079:8079 -p 8080:8080 -p 8081:8081 -p 8082:8082 -p 8083:8083 -p 8084:8084 -p 8085:8085 -p 8086:8086 envoyproxy/envoy-dev:8a2143613d43d17d1eb35a24b4a4a4c432215606 -c /envoy.test.yaml In a new terminal, start the funding wallet. This wallet will be automatically funded in order to fund Alice and Bob during the tests. For example: cd ~/git/haveno && make funding-wallet . Install protobuf compiler v3.19.1 or later for your system: mac: brew install protobuf linux: apt install protobuf-compiler NOTE: You may need to upgrade to v3.19.1 manually if your package manager installs an older version. Download protoc-gen-grpc-web plugin and make executable as shown here . cd haveno-ts npm install npm test to run all tests or npm run test -- -t 'my test' to run tests by name.","title":"Run API tests"},{"location":"development/haveno-ts/#adding-new-api-functions-and-tests","text":"Follow instructions to run Haveno's existing API tests successfully. Define the new service or message in Haveno's protobuf definition . Clean and build Haveno after modifying the protobuf definition: make clean && make Implement the new service in Haveno's backend, following existing patterns. For example, the gRPC function to get offers is implemented by GrpcServer > GrpcOffersService.getOffers(...) > CoreApi.getOffers(...) > CoreOffersService.getOffers(...) > OfferBookService.getOffers() . Build Haveno: make Update the gRPC client in haveno-ts: npm install Add the corresponding typescript method(s) to haveno.ts with clear and concise documentation. Add clean and comprehensive tests to haveno.test.ts , following existing patterns. Run the tests with npm run test -- -t 'my test' to run tests by name and npm test to run all tests together. Ensure all tests pass and there are no exception stacktraces in the terminals of Alice, Bob, or the arbitrator. Open pull requests to the haveno and haveno-ts projects for the backend and frontend implementations.","title":"Adding new API functions and tests"},{"location":"development/haveno-ui/","text":"The Haveno user interface Currently Haveno is using Bisq's user interface (what we call 'legacy UI'), which we inherited when we forked Bisq. We think the legacy UI has serious performance and usability issues, so we decided to build our own interface, focused on performance and simplicity. Note The new user interface is being developed by an external team, but works have been temporarily suspended. See the dedicated blog post for the details. The new interface will bring several improvements compared to the legacy UI: Separated backend and frontend, which will result in increased performances and user experience Built on ReactJS instead of the very heavy and poorly performing JavaFX Completely new flow built for all users not only power users Like the rest of Haveno, the new user interface is completely open source and contributions/suggestions from the community are welcome, but remember to take a look at the contributor guidelines first. haveno-ui Contribute to Design A dedicated developer has been designing the new user interface. Community contributions are welcome and encouraged. See the repositories for more deails. haveno-design","title":"User Interface"},{"location":"development/haveno-ui/#the-haveno-user-interface","text":"Currently Haveno is using Bisq's user interface (what we call 'legacy UI'), which we inherited when we forked Bisq. We think the legacy UI has serious performance and usability issues, so we decided to build our own interface, focused on performance and simplicity. Note The new user interface is being developed by an external team, but works have been temporarily suspended. See the dedicated blog post for the details. The new interface will bring several improvements compared to the legacy UI: Separated backend and frontend, which will result in increased performances and user experience Built on ReactJS instead of the very heavy and poorly performing JavaFX Completely new flow built for all users not only power users Like the rest of Haveno, the new user interface is completely open source and contributions/suggestions from the community are welcome, but remember to take a look at the contributor guidelines first. haveno-ui","title":"The Haveno user interface"},{"location":"development/haveno-ui/#contribute-to-design","text":"A dedicated developer has been designing the new user interface. Community contributions are welcome and encouraged. See the repositories for more deails. haveno-design","title":"Contribute to Design"},{"location":"development/importing/","text":"Importing Haveno dev environment This document describes how to import Haveno into an integrated development environment (IDE). Eclipse IDE These steps describe how to import Haveno into Eclipse IDE for development. You can also develop using IntelliJ IDEA or VSCode if you prefer. Note Use default values unless specified otherwise. If you haven't already, first install and run a Haveno test network . Download and run the Eclipse installer. Select \"Eclipse IDE for Enterprise Java and Web Developers\" to install. Launch an eclipse workspace and close out of the welcome screen. Download the latest version of the lombok jar. Run lombok jar, e.g.: java -jar ~/Downloads/lombok-1.18.22.jar . Follow prompts to install lombok to your Eclipse installation. Restart Eclipse. File > Import... > Existing Gradle Project. Select the location of \"haveno\" project, e.g. ~/git/haveno. Advance to finish importing haveno project. Right click haveno project > Gradle > Refresh Gradle Project. File > Import... > Existing Projects into Workspace. Select the location of \"haveno-ts\" project, e.g. ~/git/haveno-ts. Advance to finish importing haveno-ts project. You are now ready to make, run, and test changes to the Haveno project! IntelliJ IDEA Outdated These instructions are outdated and for Bisq, but could still adapted and be used for Haveno. Most Bisq contributors use IDEA for development. The following instructions have been tested on IDEA 2021.1. Follow the instructions in build.md to clone and build Bisq at the command line. Open IDEA Go to File -> Settings -> Build, Execution, Deployment -> Compiler -> Annotation Processors and check the Enable annotation processing option to enable processing of Lombok annotations (Lombok plugin installed by default since v2020.3) Go to File -> New -> Project from Existing Sources... and then select the main Bisq folder to load automatically the related Gradle project If you did not yet setup JDK11 in IntelliJ, go to File-> Project Structure -> Project and under the Project SDK option locate your JDK11 folder Select JDK 11 for Gradle as well. Go to File -> Settings -> Build, Execution, Deployment -> Build Tools -> Gradle and select the JDK11 location for the Gradle JVM value Go to Build -> Build Project . Everything should build cleanly Go to Run > Edit Configurations... -> Plus (+) icon on the top left -> Application anf then fill the requested fields Now you should be able to run Bisq by clicking on the Play button or via Run -> Run 'Bisq Desktop' If you want to debug the application and execute breakpoints, use Run -> Debug 'Bisq Desktop' TIP: If you encounter compilation errors in IDEA related to the protobuf.* classes, it is probably because you didn't build Bisq at the command line as instructed above. You need to run the generateProto task in the other project. You can do this via the Gradle tool window in IDEA, or you can do it the command line with ./gradlew :other:generateProto . Once you've done that, run Build -> Build Project again and you should have no errors. If this does not solve the issue, try to execute ./gradlew clean and then rebuild the project again.","title":"Import Development Environment"},{"location":"development/importing/#importing-haveno-dev-environment","text":"This document describes how to import Haveno into an integrated development environment (IDE).","title":"Importing Haveno dev environment"},{"location":"development/importing/#eclipse-ide","text":"These steps describe how to import Haveno into Eclipse IDE for development. You can also develop using IntelliJ IDEA or VSCode if you prefer. Note Use default values unless specified otherwise. If you haven't already, first install and run a Haveno test network . Download and run the Eclipse installer. Select \"Eclipse IDE for Enterprise Java and Web Developers\" to install. Launch an eclipse workspace and close out of the welcome screen. Download the latest version of the lombok jar. Run lombok jar, e.g.: java -jar ~/Downloads/lombok-1.18.22.jar . Follow prompts to install lombok to your Eclipse installation. Restart Eclipse. File > Import... > Existing Gradle Project. Select the location of \"haveno\" project, e.g. ~/git/haveno. Advance to finish importing haveno project. Right click haveno project > Gradle > Refresh Gradle Project. File > Import... > Existing Projects into Workspace. Select the location of \"haveno-ts\" project, e.g. ~/git/haveno-ts. Advance to finish importing haveno-ts project. You are now ready to make, run, and test changes to the Haveno project!","title":"Eclipse IDE"},{"location":"development/importing/#intellij-idea","text":"Outdated These instructions are outdated and for Bisq, but could still adapted and be used for Haveno. Most Bisq contributors use IDEA for development. The following instructions have been tested on IDEA 2021.1. Follow the instructions in build.md to clone and build Bisq at the command line. Open IDEA Go to File -> Settings -> Build, Execution, Deployment -> Compiler -> Annotation Processors and check the Enable annotation processing option to enable processing of Lombok annotations (Lombok plugin installed by default since v2020.3) Go to File -> New -> Project from Existing Sources... and then select the main Bisq folder to load automatically the related Gradle project If you did not yet setup JDK11 in IntelliJ, go to File-> Project Structure -> Project and under the Project SDK option locate your JDK11 folder Select JDK 11 for Gradle as well. Go to File -> Settings -> Build, Execution, Deployment -> Build Tools -> Gradle and select the JDK11 location for the Gradle JVM value Go to Build -> Build Project . Everything should build cleanly Go to Run > Edit Configurations... -> Plus (+) icon on the top left -> Application anf then fill the requested fields Now you should be able to run Bisq by clicking on the Play button or via Run -> Run 'Bisq Desktop' If you want to debug the application and execute breakpoints, use Run -> Debug 'Bisq Desktop' TIP: If you encounter compilation errors in IDEA related to the protobuf.* classes, it is probably because you didn't build Bisq at the command line as instructed above. You need to run the generateProto task in the other project. You can do this via the Gradle tool window in IDEA, or you can do it the command line with ./gradlew :other:generateProto . Once you've done that, run Build -> Build Project again and you should have no errors. If this does not solve the issue, try to execute ./gradlew clean and then rebuild the project again.","title":"IntelliJ IDEA"},{"location":"development/installing/","text":"Set up environment These are the steps needed to build Haveno and test it on our test network or locally. Install dependencies On Ubuntu: sudo apt install make wget git openjdk-11-jdk . The Monero binaries will be downloaded and verified automatically in the next step. Build Haveno If it's the first time you are building Haveno, run the following commands to download the repository, the needed dependencies, and build the latest release: git clone https://github.com/haveno-dex/haveno.git cd haveno git checkout {{ version.haveno}} make If you only want to quickly build the binaries, use make skip-tests instead of make . It will skip the tests and increase the build speed drastically. If you are updating from a previous version, run from the root of the repository: git fetch --tags git checkout {{ version.haveno}} make clean && make Make sure to delete the folder with the local settings, as there are breaking changes between releases: On Linux : remove everything inside ~/.local/share/haveno-*/xmr_stagenet/ , except the wallet folder. On Mac : remove everything inside ~/Library/Application\\ Support/haveno-*/xmr_stagenet/ , except the wallet folder. Join the public test network If you want to try Haveno in a live setup, launch a Haveno instance that will connect to other peers on our public test environment, which runs on Monero's stagenet (you won't need to download the blockchain locally). You'll be able to make test trades with other users and have a preview of Haveno's trade protocol in action. Note that development is very much ongoing. Things are slow and might break. Steps: Run make user1-desktop-stagenet to start the application. Click on the \"Funds\" tab in the top menu and copy the generated XMR address. Go to the stagenet faucet and paste the address above in the \"Get XMR\" field. Submit and see the stagenet coins being sent to your Haveno instance. While you wait for the 10 confirmations (20 minutes) needed for your funds to be spendable, create a fiat account by clicking on \"Account\" in the top menu, select the \"National currency accounts\" tab, then add a new account. For simplicity, we suggest testing using a Revolut account with a random ID. Now pick up an existing offer or open a new one. Fund your trade and wait for 10 blocks for your deposit to be unlocked. Now if you are taking a trade you'll be asked to confirm you have sent the payment outside Haveno. Confirm in the app and wait for the confirmation of the received payment from the other trader. Once the other trader confirms, deposits are sent back to the owners and the trade is complete. Run a local test network If you are a developer who wants to test Haveno in a more controlled way, follow the next steps to build a local test environment. Run a local XMR testnet In a new terminal window run make monerod-local1 In a new terminal window run make monerod-local2 Now mine the first 150 blocks to a random address before using, so wallets only use the latest output type. Run in one of the terminal windows opened above: start_mining 9tsUiG9bwcU7oTbAdBwBk2PzxFtysge5qcEsHEpetmEKgerHQa1fDqH7a4FiquZmms7yM22jdifVAD7jAb2e63GSJMuhY75 1 Deploy If you are a screen user, simply run make deploy . This command will open all needed Haveno instances (seednode, user1, user2, arbitrator) using screen . If this is the first time launching the arbitrator desktop application, register the arbitrator as explained in step 3 below. If you don't use screen , open 4 terminal windows and run in each one of them: make seednode-local make user1-desktop-local or if you want to run user1 as a daemon: make user1-daemon-local make user2-desktop-local or if you want to run user2 as a daemon: make user2-daemon-local If this is the first time launching the arbitrator desktop application, register the arbitrator after the interface opens. Go to the Account tab and press cmd+r . Confirm the registration of the arbitrator. Fund your wallets When running user1 and user2, you'll see a Monero address prompted in the terminal. Send test XMR to the addresses of both user1 and user2 to be able to initiate a trade. You can fund the two wallets by mining some test XMR coins to those addresses. To do so, open a terminal where you ran monerod and run: start_mining ADDRESS 1 . monerod will start mining local testnet coins on your device using one thread. Replace ADDRESS with the address of user1 first, and then user2's. Run stop_mining to stop mining. Start testing You are all set. Now that everything is running and your wallets are funded, you can create test trades between user1 and user2. Remember to mine a few blocks after opening and accepting the test trade so the transaction will be confirmed.","title":"Install and Run Haveno"},{"location":"development/installing/#set-up-environment","text":"These are the steps needed to build Haveno and test it on our test network or locally.","title":"Set up environment"},{"location":"development/installing/#install-dependencies","text":"On Ubuntu: sudo apt install make wget git openjdk-11-jdk . The Monero binaries will be downloaded and verified automatically in the next step.","title":"Install dependencies"},{"location":"development/installing/#build-haveno","text":"If it's the first time you are building Haveno, run the following commands to download the repository, the needed dependencies, and build the latest release: git clone https://github.com/haveno-dex/haveno.git cd haveno git checkout {{ version.haveno}} make If you only want to quickly build the binaries, use make skip-tests instead of make . It will skip the tests and increase the build speed drastically. If you are updating from a previous version, run from the root of the repository: git fetch --tags git checkout {{ version.haveno}} make clean && make Make sure to delete the folder with the local settings, as there are breaking changes between releases: On Linux : remove everything inside ~/.local/share/haveno-*/xmr_stagenet/ , except the wallet folder. On Mac : remove everything inside ~/Library/Application\\ Support/haveno-*/xmr_stagenet/ , except the wallet folder.","title":"Build Haveno"},{"location":"development/installing/#join-the-public-test-network","text":"If you want to try Haveno in a live setup, launch a Haveno instance that will connect to other peers on our public test environment, which runs on Monero's stagenet (you won't need to download the blockchain locally). You'll be able to make test trades with other users and have a preview of Haveno's trade protocol in action. Note that development is very much ongoing. Things are slow and might break. Steps: Run make user1-desktop-stagenet to start the application. Click on the \"Funds\" tab in the top menu and copy the generated XMR address. Go to the stagenet faucet and paste the address above in the \"Get XMR\" field. Submit and see the stagenet coins being sent to your Haveno instance. While you wait for the 10 confirmations (20 minutes) needed for your funds to be spendable, create a fiat account by clicking on \"Account\" in the top menu, select the \"National currency accounts\" tab, then add a new account. For simplicity, we suggest testing using a Revolut account with a random ID. Now pick up an existing offer or open a new one. Fund your trade and wait for 10 blocks for your deposit to be unlocked. Now if you are taking a trade you'll be asked to confirm you have sent the payment outside Haveno. Confirm in the app and wait for the confirmation of the received payment from the other trader. Once the other trader confirms, deposits are sent back to the owners and the trade is complete.","title":"Join the public test network"},{"location":"development/installing/#run-a-local-test-network","text":"If you are a developer who wants to test Haveno in a more controlled way, follow the next steps to build a local test environment.","title":"Run a local test network"},{"location":"development/installing/#run-a-local-xmr-testnet","text":"In a new terminal window run make monerod-local1 In a new terminal window run make monerod-local2 Now mine the first 150 blocks to a random address before using, so wallets only use the latest output type. Run in one of the terminal windows opened above: start_mining 9tsUiG9bwcU7oTbAdBwBk2PzxFtysge5qcEsHEpetmEKgerHQa1fDqH7a4FiquZmms7yM22jdifVAD7jAb2e63GSJMuhY75 1","title":"Run a local XMR testnet"},{"location":"development/installing/#deploy","text":"If you are a screen user, simply run make deploy . This command will open all needed Haveno instances (seednode, user1, user2, arbitrator) using screen . If this is the first time launching the arbitrator desktop application, register the arbitrator as explained in step 3 below. If you don't use screen , open 4 terminal windows and run in each one of them: make seednode-local make user1-desktop-local or if you want to run user1 as a daemon: make user1-daemon-local make user2-desktop-local or if you want to run user2 as a daemon: make user2-daemon-local If this is the first time launching the arbitrator desktop application, register the arbitrator after the interface opens. Go to the Account tab and press cmd+r . Confirm the registration of the arbitrator.","title":"Deploy"},{"location":"development/installing/#fund-your-wallets","text":"When running user1 and user2, you'll see a Monero address prompted in the terminal. Send test XMR to the addresses of both user1 and user2 to be able to initiate a trade. You can fund the two wallets by mining some test XMR coins to those addresses. To do so, open a terminal where you ran monerod and run: start_mining ADDRESS 1 . monerod will start mining local testnet coins on your device using one thread. Replace ADDRESS with the address of user1 first, and then user2's. Run stop_mining to stop mining.","title":"Fund your wallets"},{"location":"development/installing/#start-testing","text":"You are all set. Now that everything is running and your wallets are funded, you can create test trades between user1 and user2. Remember to mine a few blocks after opening and accepting the test trade so the transaction will be confirmed.","title":"Start testing"},{"location":"the-project/assets/","text":"Assets Note the assets and currencies currently listed on Haveno are inherited from Bisq (but not cryptocurrencies). The list will be cleaned up and trimmed when the new interface will be ready. These are the assets currently supported on Haveno. The community is welcome to suggest new assets by opening a request . Crypto These are the cryptocurrencies currently listed on Haveno: Remember Monero is the base base currency of all the cryptocurrencies below (e.g. XMR/BTC, XMR/ETH). Monero Bitcoin Litecoin Bitcoin Cash Ether Payment Methods and fiat currencies Warning Payment methods and supported fiat currencies will be updated in the future.","title":"Assets and Payment Methods"},{"location":"the-project/assets/#assets","text":"Note the assets and currencies currently listed on Haveno are inherited from Bisq (but not cryptocurrencies). The list will be cleaned up and trimmed when the new interface will be ready. These are the assets currently supported on Haveno. The community is welcome to suggest new assets by opening a request .","title":"Assets"},{"location":"the-project/assets/#crypto","text":"These are the cryptocurrencies currently listed on Haveno: Remember Monero is the base base currency of all the cryptocurrencies below (e.g. XMR/BTC, XMR/ETH). Monero Bitcoin Litecoin Bitcoin Cash Ether","title":"Crypto"},{"location":"the-project/assets/#payment-methods-and-fiat-currencies","text":"Warning Payment methods and supported fiat currencies will be updated in the future.","title":"Payment Methods and fiat currencies"},{"location":"the-project/conflict-resolution/","text":"Conflict Resolution Trades don't always go smoothly. Things can go wrong for multiple reasons, like a trader being suddenly unresponsive, wrong bank details provided, etc. When that happens and using the trade chat to talk with the other trader didn't help resolve the problem, human intervention is necessary to unlock the situation. As we explained in the trade protocol page, trades are secured by Monero's multisignature and one of the 3 keys is given to an arbitrator , which will not intervene until there is an issue the two traders cannot resolve by themselves using the trade chat. Once the arbitrator is summoned, they will assess which party is in the right and which one is in the wrong and use the key they were provided to side with one of the two traders. Safety Assurances Arbitrators are appointed by the Konsilio and they are given one key for each trade so that when they are called, they have the power to side with one of the traders and move funds. This makes the arbitrator a sensitive role. Since a trade can be completed if 2 of the 3 keys confirm the transaction, a trader could find themselves in a situation where a malicious arbitrator sides with the other trader with no merit and push the transaction to them, resulting in the honest traded being factually scammed. We take multiple measures to make this situation very unlikely and discouraged: The arbitrator is picked randomly from the pull of available arbitrators. Arbitrators will be anonymous on the platform. Arbitrators will be people with a high reputation in the Monero and Haveno communities. Note Bonds are a powerful tool to ensure an arbitrator doesn't behave maliciously and they will be probably added in the future. Conflict resolution example A practical example of a conflict resolved by an arbitrator on Haveno: Alice and Bob have a trade in progress, where Alice is selling XMR and Bob are buying in exchange for EUR. Alice sees that Bob is signaling on Haveno that he sent the money through bank transfer, as agreed, but the money hasn't arrived in Alice's bank account yet. After Alice has waited enough to ensure the transfer is not simply delayed, she will contact the other trader through the built-in chat in the trade. Bob claims he sent the payment, but Alice still hasn't received it. She has no other choice than to summon an arbitrator The arbitrators will be called in and will chat with both traders, asking for details and an overview of the situation The arbitrator, using tools that assure the authenticity of the resources provided, sees that Bob has never sent the payment. Since Bib is misbehaving (claims to have sent the payment but he didn't), he will be punished by the arbitrator, which will send her deposit back to Alice and will take the security deposit from Bob as punishment. Alice got her locked deposit and XMR back, while Bob lost his deposit. Conflict resolved. Note The deposit is taken away as punishment only in the case of a malicious trader. Technical or other problems will be simply resolved by sending each trader's deposit (minus the platform fee) back to them.","title":"Conflict Resolution"},{"location":"the-project/conflict-resolution/#conflict-resolution","text":"Trades don't always go smoothly. Things can go wrong for multiple reasons, like a trader being suddenly unresponsive, wrong bank details provided, etc. When that happens and using the trade chat to talk with the other trader didn't help resolve the problem, human intervention is necessary to unlock the situation. As we explained in the trade protocol page, trades are secured by Monero's multisignature and one of the 3 keys is given to an arbitrator , which will not intervene until there is an issue the two traders cannot resolve by themselves using the trade chat. Once the arbitrator is summoned, they will assess which party is in the right and which one is in the wrong and use the key they were provided to side with one of the two traders.","title":"Conflict Resolution"},{"location":"the-project/conflict-resolution/#safety-assurances","text":"Arbitrators are appointed by the Konsilio and they are given one key for each trade so that when they are called, they have the power to side with one of the traders and move funds. This makes the arbitrator a sensitive role. Since a trade can be completed if 2 of the 3 keys confirm the transaction, a trader could find themselves in a situation where a malicious arbitrator sides with the other trader with no merit and push the transaction to them, resulting in the honest traded being factually scammed. We take multiple measures to make this situation very unlikely and discouraged: The arbitrator is picked randomly from the pull of available arbitrators. Arbitrators will be anonymous on the platform. Arbitrators will be people with a high reputation in the Monero and Haveno communities. Note Bonds are a powerful tool to ensure an arbitrator doesn't behave maliciously and they will be probably added in the future.","title":"Safety Assurances"},{"location":"the-project/conflict-resolution/#conflict-resolution-example","text":"A practical example of a conflict resolved by an arbitrator on Haveno: Alice and Bob have a trade in progress, where Alice is selling XMR and Bob are buying in exchange for EUR. Alice sees that Bob is signaling on Haveno that he sent the money through bank transfer, as agreed, but the money hasn't arrived in Alice's bank account yet. After Alice has waited enough to ensure the transfer is not simply delayed, she will contact the other trader through the built-in chat in the trade. Bob claims he sent the payment, but Alice still hasn't received it. She has no other choice than to summon an arbitrator The arbitrators will be called in and will chat with both traders, asking for details and an overview of the situation The arbitrator, using tools that assure the authenticity of the resources provided, sees that Bob has never sent the payment. Since Bib is misbehaving (claims to have sent the payment but he didn't), he will be punished by the arbitrator, which will send her deposit back to Alice and will take the security deposit from Bob as punishment. Alice got her locked deposit and XMR back, while Bob lost his deposit. Conflict resolved. Note The deposit is taken away as punishment only in the case of a malicious trader. Technical or other problems will be simply resolved by sending each trader's deposit (minus the platform fee) back to them.","title":"Conflict resolution example"},{"location":"the-project/overview/","text":"Overview of Haveno Haveno is a platform where people meet to exchange Monero for other cryptocurrencies or fiat currencies. Monero coins are used as security deposit by traders, which will then make the exchange outside Haveno (for example a bank transfer from trader A to trader B). After the exchange is completed, both traders will receive their security deposit back. One trader will receive the asset (for example, Euros or Dollars) and the other trader the amount of XMR agreed for that asset. The Haveno Network When running an Haveno app, you'll be one of the nodes that composes the Haveno network. There is no central entity, trades happen directly between nodes (peers), that's why it's called a peer-to-peer network (P2P). This network runs on Tor, a technology that makes communication between peers private. Haveno, unlike a centralized exchange, doesn't provide any liquidity to the network, but instead offers a place for people to meet and an escrow system to make sure both parties honour the terms of the trade until it's completed. Note Haveno is fully non-custodial: the wallet is created locally and only the user has access to it. The Haveno Ecosystem Haveno it's revolutionary not only because brings native, decentralized trades based on Monero, but also because of the structure of its ecosystem, composed of multiple independent entities, each with a very specific role: Haveno Core Team : Works on the code of the platform and marketing, but doesn't run it. Motoro : It's the entity that receives all the fees paid by users on Haveno, appoints arbitrators, and votes on Motoro proposals. Publishers : They make the software available and run some of the seednodes This structure makes Haveno resistant to external attacks and ensures that the codebase is never \"live\". Behind the scenes When users pay trade fees on Haveno, these are sent directly to Motoro. This is an important point, because the Haveno Core Team, who maintain the Haveno code and project will not have control over the revenue generated by the platform, same for the publishers. These funds will form a treasure that the Konsilio, which manages Motoro, will decide how to administer and distribute. Anyone working or contributing to Haveno in any form will be welcome to make Motoro proposals and ask for their efforts to be rewarded using Motoro's fund. Note Motoro is very similar to Monero's CCS , but instead of generous donors providing funds, the fees paid by the users on Haveno will be the source of funds. Decisions about how to manage these funds are taken by the Konsilio. For example, the Haveno Core Team, who created and maintains Haveno, will open periodical proposals, asking for a reward for their contribution to the ecosystem. Same for the Publishers. The Konsilio will vote on the proposal and release the funds if they approve it. This works for individuals too! If you contribute to Haveno, for example by doing development work or creating a project that benefits Haveno's ecosystem, you can open Motoro proposals and ask to be rewarded. Remember Motoro is not meant to be used only for Haveno-related projects, but also to fund Monero projects or individuals. Do you have an idea that would improve Monero and need funds to develop it? Open a Motoro proposal!","title":"Overview of Haveno"},{"location":"the-project/overview/#overview-of-haveno","text":"Haveno is a platform where people meet to exchange Monero for other cryptocurrencies or fiat currencies. Monero coins are used as security deposit by traders, which will then make the exchange outside Haveno (for example a bank transfer from trader A to trader B). After the exchange is completed, both traders will receive their security deposit back. One trader will receive the asset (for example, Euros or Dollars) and the other trader the amount of XMR agreed for that asset.","title":"Overview of Haveno"},{"location":"the-project/overview/#the-haveno-network","text":"When running an Haveno app, you'll be one of the nodes that composes the Haveno network. There is no central entity, trades happen directly between nodes (peers), that's why it's called a peer-to-peer network (P2P). This network runs on Tor, a technology that makes communication between peers private. Haveno, unlike a centralized exchange, doesn't provide any liquidity to the network, but instead offers a place for people to meet and an escrow system to make sure both parties honour the terms of the trade until it's completed. Note Haveno is fully non-custodial: the wallet is created locally and only the user has access to it.","title":"The Haveno Network"},{"location":"the-project/overview/#the-haveno-ecosystem","text":"Haveno it's revolutionary not only because brings native, decentralized trades based on Monero, but also because of the structure of its ecosystem, composed of multiple independent entities, each with a very specific role: Haveno Core Team : Works on the code of the platform and marketing, but doesn't run it. Motoro : It's the entity that receives all the fees paid by users on Haveno, appoints arbitrators, and votes on Motoro proposals. Publishers : They make the software available and run some of the seednodes This structure makes Haveno resistant to external attacks and ensures that the codebase is never \"live\".","title":"The Haveno Ecosystem"},{"location":"the-project/overview/#behind-the-scenes","text":"When users pay trade fees on Haveno, these are sent directly to Motoro. This is an important point, because the Haveno Core Team, who maintain the Haveno code and project will not have control over the revenue generated by the platform, same for the publishers. These funds will form a treasure that the Konsilio, which manages Motoro, will decide how to administer and distribute. Anyone working or contributing to Haveno in any form will be welcome to make Motoro proposals and ask for their efforts to be rewarded using Motoro's fund. Note Motoro is very similar to Monero's CCS , but instead of generous donors providing funds, the fees paid by the users on Haveno will be the source of funds. Decisions about how to manage these funds are taken by the Konsilio. For example, the Haveno Core Team, who created and maintains Haveno, will open periodical proposals, asking for a reward for their contribution to the ecosystem. Same for the Publishers. The Konsilio will vote on the proposal and release the funds if they approve it. This works for individuals too! If you contribute to Haveno, for example by doing development work or creating a project that benefits Haveno's ecosystem, you can open Motoro proposals and ask to be rewarded. Remember Motoro is not meant to be used only for Haveno-related projects, but also to fund Monero projects or individuals. Do you have an idea that would improve Monero and need funds to develop it? Open a Motoro proposal!","title":"Behind the scenes"},{"location":"the-project/trade-protocol/","text":"Trade Protocol Haveno is a decentralized network where people meet to exchange XMR for fiat or other cryptocurrencies. There are no central entities involved and trades happen directly between traders, which are both required to deposit and lock some XMR until the trade is completed. In case of disagreement between traders, both of them can request the involvement of an arbitrator, which will resolve the dispute. Secure trade with multisignature trades are secured using Monero's \"Multisignature\" technology In Haveno we use 2-of-3 multisignature wallets because the number of keys generated is 3, but only 2 of those are needed to send a transaction. What is Multisignature? A multisignature wallet is like a normal Monero wallet. The difference is that in a normal wallet there is only one key to be used to \"sign\" (send) transactions, while in a multisignature wallet is more than one (multi-signature). When two people start a trade, their deposits and fees are sent to a newly created multisignature wallet 2-of-3, where the 3 keys are distributed one each to the two traders and one to the arbitrator. Now three entities have 1 key each, but only 2 are needed to complete the trade. The two traders will start the trade. So one of the two will have to send crypto or fiat currencies to the destination specified by the other trader. Remember The payment happens outside of Haveno, which is mostly used to hold the two trader's deposits in escrow and the amount of XMR to be exchanged. When the recipient of the payment confirms that they received the money (for example, a bank transfer), they will sign a transaction using the key they received when they added their deposit. All this is process is made as simple as needing to click \"send payment\" after a payment is sent and \"payment received\", after it's received. Overview of a trade Note This is a simplification to give an idea of the typical flow of a trade on Haveno. For technical details see the PDF . Roles: Maker - the person making the offer Taker - the person taking the offer Arbitrator - entity resolving possible disputes Remember We assume the maker is selling XMR and the taker is buying them in exchange for fiat. (optional) Maker deposits funds to Haveno wallet and waits for them to be unlocked (~20 minutes). Maker creates an offer which reserves funds for the security deposit + amount to be sent to the taker. Also creates a penalty transaction that penalizes the maker if they break protocol. Taker accepts offer which reserves funds for the security deposit + amount to be sent to the maker. As for the maker in the step above, a penalty transaction is created. A 2/3 multisignature wallet is created between the maker, taker, and arbitrator. The arbitrator holds the third key so that they can be summoned in case of disputes. If there is no dispute, the traders will complete the transaction without involving an arbitrator. Both users have their deposits locked in multisig. Now they wait until the funds are spendable (~20 minutes). In the meantime, the XMR buyer can send payment outside Haveno (e.g. send a bank transfer to the other trader). When the taker has received the agreed amount with the agreed payment method, they signal to the maker that they have received the payment. The maker checks they have received the agreed amount and if everything is ok, they confirm the completed payment . When the XMR seller confirms they received the payment outside Haveno, the agreed amount in XMR is sent to the buyer, while the security deposits of both traders are returned to them. Trade completed . This protocol ensures trades on Haveno are non-custodial (Haveno never has access to your funds), peer-to-peer (there is no central entity, people trade among themselves), and safe (thanks to the security deposit and opt-in arbitration).","title":"Trade Protocol"},{"location":"the-project/trade-protocol/#trade-protocol","text":"Haveno is a decentralized network where people meet to exchange XMR for fiat or other cryptocurrencies. There are no central entities involved and trades happen directly between traders, which are both required to deposit and lock some XMR until the trade is completed. In case of disagreement between traders, both of them can request the involvement of an arbitrator, which will resolve the dispute.","title":"Trade Protocol"},{"location":"the-project/trade-protocol/#secure-trade-with-multisignature","text":"trades are secured using Monero's \"Multisignature\" technology In Haveno we use 2-of-3 multisignature wallets because the number of keys generated is 3, but only 2 of those are needed to send a transaction. What is Multisignature? A multisignature wallet is like a normal Monero wallet. The difference is that in a normal wallet there is only one key to be used to \"sign\" (send) transactions, while in a multisignature wallet is more than one (multi-signature). When two people start a trade, their deposits and fees are sent to a newly created multisignature wallet 2-of-3, where the 3 keys are distributed one each to the two traders and one to the arbitrator. Now three entities have 1 key each, but only 2 are needed to complete the trade. The two traders will start the trade. So one of the two will have to send crypto or fiat currencies to the destination specified by the other trader. Remember The payment happens outside of Haveno, which is mostly used to hold the two trader's deposits in escrow and the amount of XMR to be exchanged. When the recipient of the payment confirms that they received the money (for example, a bank transfer), they will sign a transaction using the key they received when they added their deposit. All this is process is made as simple as needing to click \"send payment\" after a payment is sent and \"payment received\", after it's received.","title":"Secure trade with multisignature"},{"location":"the-project/trade-protocol/#overview-of-a-trade","text":"Note This is a simplification to give an idea of the typical flow of a trade on Haveno. For technical details see the PDF . Roles: Maker - the person making the offer Taker - the person taking the offer Arbitrator - entity resolving possible disputes Remember We assume the maker is selling XMR and the taker is buying them in exchange for fiat. (optional) Maker deposits funds to Haveno wallet and waits for them to be unlocked (~20 minutes). Maker creates an offer which reserves funds for the security deposit + amount to be sent to the taker. Also creates a penalty transaction that penalizes the maker if they break protocol. Taker accepts offer which reserves funds for the security deposit + amount to be sent to the maker. As for the maker in the step above, a penalty transaction is created. A 2/3 multisignature wallet is created between the maker, taker, and arbitrator. The arbitrator holds the third key so that they can be summoned in case of disputes. If there is no dispute, the traders will complete the transaction without involving an arbitrator. Both users have their deposits locked in multisig. Now they wait until the funds are spendable (~20 minutes). In the meantime, the XMR buyer can send payment outside Haveno (e.g. send a bank transfer to the other trader). When the taker has received the agreed amount with the agreed payment method, they signal to the maker that they have received the payment. The maker checks they have received the agreed amount and if everything is ok, they confirm the completed payment . When the XMR seller confirms they received the payment outside Haveno, the agreed amount in XMR is sent to the buyer, while the security deposits of both traders are returned to them. Trade completed . This protocol ensures trades on Haveno are non-custodial (Haveno never has access to your funds), peer-to-peer (there is no central entity, people trade among themselves), and safe (thanks to the security deposit and opt-in arbitration).","title":"Overview of a trade"},{"location":"the-project/roles/arbitrators/","text":"Arbitrators Arbitrators are the key of conflict resolution in Haveno. They are the entity that holds the third key of each trade so that they can intervene and unlock a trade when summoned. Arbitrators are a sensitive role because they hold 1 of the 3 keys involved in a trade and they can potentially collude with one of the traders since, with 2 of the 3 keys, it's possible to send the deposited XMR to one of the two trader's address. Given the risk, there are several mechanisms in place that make it very unlikely that an Arbitrator go rogue. See the trade protocol for details. Nomination People who wish to work as arbitrators on Haveno will open a dedicated Motoro proposal, detailing why they would like to be Arbitrators, their previous experience in Monero, and other details that make them trustworthy for the role. In the future, bonds might be introduced, to provide an additional layer of security. The work of the arbitrator An arbitrator will run an Haveno instance and will stay available to traders. When called, they will evaluate the complaints and, after making the appropriate investigation, will decide which part is in the right and which part is in the wrong and will award escrowed funds accordingly. Reward Arbitrators are free to ask for a reward for their work to Motoro , by opening a Motoro Proposal, which will be evaluated by the Konsilio, like every other proposal.","title":"Arbitrators"},{"location":"the-project/roles/arbitrators/#arbitrators","text":"Arbitrators are the key of conflict resolution in Haveno. They are the entity that holds the third key of each trade so that they can intervene and unlock a trade when summoned. Arbitrators are a sensitive role because they hold 1 of the 3 keys involved in a trade and they can potentially collude with one of the traders since, with 2 of the 3 keys, it's possible to send the deposited XMR to one of the two trader's address. Given the risk, there are several mechanisms in place that make it very unlikely that an Arbitrator go rogue. See the trade protocol for details.","title":"Arbitrators"},{"location":"the-project/roles/arbitrators/#nomination","text":"People who wish to work as arbitrators on Haveno will open a dedicated Motoro proposal, detailing why they would like to be Arbitrators, their previous experience in Monero, and other details that make them trustworthy for the role. In the future, bonds might be introduced, to provide an additional layer of security.","title":"Nomination"},{"location":"the-project/roles/arbitrators/#the-work-of-the-arbitrator","text":"An arbitrator will run an Haveno instance and will stay available to traders. When called, they will evaluate the complaints and, after making the appropriate investigation, will decide which part is in the right and which part is in the wrong and will award escrowed funds accordingly.","title":"The work of the arbitrator"},{"location":"the-project/roles/arbitrators/#reward","text":"Arbitrators are free to ask for a reward for their work to Motoro , by opening a Motoro Proposal, which will be evaluated by the Konsilio, like every other proposal.","title":"Reward"},{"location":"the-project/roles/core-team/","text":"Haveno Core Team The Haveno Core Team is currently composed of 2 people: Woodser and ErCiccione. They take care of everything related to Haveno development and expansion. They maintain all the Haveno repositories in github.com/haveno-dex/ . The core team doesn't take care of running the live network, they only work on the repositories. The binaries are released by the publishers . They are rewarded as any other entity in the Haveno ecosystem: by opening a request for funds on Motoro , like all other entities in the compartmentalized structure .","title":"Core Team"},{"location":"the-project/roles/core-team/#haveno-core-team","text":"The Haveno Core Team is currently composed of 2 people: Woodser and ErCiccione. They take care of everything related to Haveno development and expansion. They maintain all the Haveno repositories in github.com/haveno-dex/ . The core team doesn't take care of running the live network, they only work on the repositories. The binaries are released by the publishers . They are rewarded as any other entity in the Haveno ecosystem: by opening a request for funds on Motoro , like all other entities in the compartmentalized structure .","title":"Haveno Core Team"},{"location":"the-project/roles/motoro/","text":"Motoro Motoro, previously unofficially called \"Engine\", is the core of the Haveno ecosystem. Its goal is similar to that of the Monero CCS : collect funds and distribute them to contributors. The difference with the CCS is that the funds are not provided by generous donors, but are sent directly from Haveno. Every time a trader pays a fee, it's sent directly to Motoro's fund. Purpose and functions The purpose of Motoro is to manage and distribute the funds they received from the live Haveno app. The other members of the Haveno ecosystem will open proposals to request a reward for their efforts in developing, running, or maintaining Haveno, but anyone can request funds from Motoro. Proposals from Monero developers or anybody else willing to improve Haveno or Monero will be welcome. From the moment it's formed, Motoro will be an independent entity completely separated from any other Haveno entity. The Donation address will be public, so anyone will be able to donate to Motoro and increase its treasure. The Konsilio Motoro is managed by a Collective of 5 volunteer Monero developers and community members, which form the Konsilio , which will receive and evaluate requests for funds by members of the Haveno and Monero ecosystems. They will act on their role anonymously and will vote on each proposal. A simple majority is requested for a proposal to be approved. The konsilio will be composed of 5 people: 1 Monero Core team member. 1 appointed by the Haveno Core Team, that will act as a volunteer representing the Haveno Core Team in the Konsilio. The volunteer has no economical relation with either the Haveno Core Team or the Konsilio. 3 Monero developers or contributors. The 5 members of the Konsilio will vote anonymously, but they will be known and respected Monero community members. Selection To choose the 3 community members of the Konsilio, a pool of candidates will be offered to the community, which with a vote will decide the 3 members: the 3 people with the most votes will be selected. Example of a Motoro request Note The detailed operation of Motoro is still being worked on. Details will be available on Motoro itself. Let's make a simple example to explain how a Motoro request would work: Alice wants to contribute to the development of Haveno or wants to build a Monero app and requires funds. Alice will open a Motoro proposal, requesting N XMR for her work, to be distributed in 3 tranches. The Konsilio will meet and evaluate the proposal. If they accept it, Alice can start working straight away and depending on the terms/milestones of her proposal, already receive an amount in XMR or receive it after development has been delivered. After all the milestones have been reached and the rewards delivered, the proposal is completed.","title":"Motoro"},{"location":"the-project/roles/motoro/#motoro","text":"Motoro, previously unofficially called \"Engine\", is the core of the Haveno ecosystem. Its goal is similar to that of the Monero CCS : collect funds and distribute them to contributors. The difference with the CCS is that the funds are not provided by generous donors, but are sent directly from Haveno. Every time a trader pays a fee, it's sent directly to Motoro's fund.","title":"Motoro"},{"location":"the-project/roles/motoro/#purpose-and-functions","text":"The purpose of Motoro is to manage and distribute the funds they received from the live Haveno app. The other members of the Haveno ecosystem will open proposals to request a reward for their efforts in developing, running, or maintaining Haveno, but anyone can request funds from Motoro. Proposals from Monero developers or anybody else willing to improve Haveno or Monero will be welcome. From the moment it's formed, Motoro will be an independent entity completely separated from any other Haveno entity. The Donation address will be public, so anyone will be able to donate to Motoro and increase its treasure.","title":"Purpose and functions"},{"location":"the-project/roles/motoro/#the-konsilio","text":"Motoro is managed by a Collective of 5 volunteer Monero developers and community members, which form the Konsilio , which will receive and evaluate requests for funds by members of the Haveno and Monero ecosystems. They will act on their role anonymously and will vote on each proposal. A simple majority is requested for a proposal to be approved. The konsilio will be composed of 5 people: 1 Monero Core team member. 1 appointed by the Haveno Core Team, that will act as a volunteer representing the Haveno Core Team in the Konsilio. The volunteer has no economical relation with either the Haveno Core Team or the Konsilio. 3 Monero developers or contributors. The 5 members of the Konsilio will vote anonymously, but they will be known and respected Monero community members.","title":"The Konsilio"},{"location":"the-project/roles/motoro/#selection","text":"To choose the 3 community members of the Konsilio, a pool of candidates will be offered to the community, which with a vote will decide the 3 members: the 3 people with the most votes will be selected.","title":"Selection"},{"location":"the-project/roles/motoro/#example-of-a-motoro-request","text":"Note The detailed operation of Motoro is still being worked on. Details will be available on Motoro itself. Let's make a simple example to explain how a Motoro request would work: Alice wants to contribute to the development of Haveno or wants to build a Monero app and requires funds. Alice will open a Motoro proposal, requesting N XMR for her work, to be distributed in 3 tranches. The Konsilio will meet and evaluate the proposal. If they accept it, Alice can start working straight away and depending on the terms/milestones of her proposal, already receive an amount in XMR or receive it after development has been delivered. After all the milestones have been reached and the rewards delivered, the proposal is completed.","title":"Example of a Motoro request"},{"location":"the-project/roles/publishers/","text":"Publishers The publishers are the entity in the Haveno ecosystem that takes care of the \"live\" app and release the binaries to the public. Like every other entity in the Haveno ecosystem, they are completely independent. A summary of their tasks is: They release the binaries (software) to the public They set the initial seednodes that users will use to bootstrap the network They provide Monero nodes for users to connect to, to boost performances They will set the Motoro donation address as the receiver of the fees paid on Haveno They give the arbitration keys to the arbitrators appointed by Motoro Publishers are not a particularly sensitive role, but they are the most exposed entity since they take care of releasing the binaries. They will ask to be rewarded for their role by opening Motoro proposals.","title":"Publishers"},{"location":"the-project/roles/publishers/#publishers","text":"The publishers are the entity in the Haveno ecosystem that takes care of the \"live\" app and release the binaries to the public. Like every other entity in the Haveno ecosystem, they are completely independent. A summary of their tasks is: They release the binaries (software) to the public They set the initial seednodes that users will use to bootstrap the network They provide Monero nodes for users to connect to, to boost performances They will set the Motoro donation address as the receiver of the fees paid on Haveno They give the arbitration keys to the arbitrators appointed by Motoro Publishers are not a particularly sensitive role, but they are the most exposed entity since they take care of releasing the binaries. They will ask to be rewarded for their role by opening Motoro proposals.","title":"Publishers"}]}